@version: 3.13
@include "scl.conf"

# Syslog-ng configuration file, compatible with default Debian syslogd
# installation.

# First, set some global options.
options { chain_hostnames(off); flush_lines(0); use_dns(no); use_fqdn(no);
	  owner("root"); group("adm"); perm(0640); stats_freq(0);
	  bad_hostname("^gconfd$");
			  keep_hostname(yes);
};

########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src {
       system();
       internal();
};

# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
#source s_net { tcp(ip(127.0.0.1) port(1000)); };

########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file("/var/log/auth.log"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_mail { file("/var/log/mail.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file("/var/log/mail.info"); };
destination d_mailwarn { file("/var/log/mail.warn"); };
destination d_mailerr { file("/var/log/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

# Some 'catch-all' logfiles.
#
destination d_debug { file("/var/log/debug"); };
destination d_error { file("/var/log/error"); };
destination d_messages { file("/var/log/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Virtual console.
#
destination d_console_all { file(`tty10`); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

# Send the messages to an other host
#
#destination d_net { tcp("127.0.0.1" port(1000) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file("/var/log/ppp.log"); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };
filter f_error { level(err .. emerg) ; };
filter f_messages { level(info,notice,warn) and 
                    not facility(auth,authpriv,cron,daemon,mail,news); };

filter f_auth { facility(auth, authpriv) and not filter(f_debug); };
filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug); };
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_syslog3 { not facility(auth, authpriv, mail) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog3); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };
#log { source(s_src); filter(f_cnews); destination(d_console_all); };
#log { source(s_src); filter(f_cother); destination(d_console_all); };

#log { source(s_src); filter(f_ppp); destination(d_ppp); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_console_all);
				    destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };

# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };

###
# Include all config files in /etc/syslog-ng/conf.d/
###
@include "/etc/syslog-ng/conf.d/*.conf"
###
# Include config log from bdds
###
# Source
source s_udp {
    udp(port(514));
};
# Filter
filter f_load_configuration_failure{
    match("(re)*loading configuration.*(failed)*: (?!success)" value("MESSAGE"));
};

filter f_load_configuration_success{
    match("running(?!.)" value("MESSAGE"));
};

filter f_load_zone_failure{
    match("zone.+/IN/.+loading from master file.+failed.+" value("MESSAGE"));
    or
    match("zone.+/IN/.+not loaded due to errors" value("MESSAGE"));
};

filter f_load_zone_success{
    match("zone.+/IN/.+loaded serial.+" value("MESSAGE"));
};

filter f_tsig_bad_time{
    match("client.+view.+request has invalid signature.+tsig verify failure.+\(BADTIME\)" value("MESSAGE"));
    or
    match("zone.+/IN/.+refresh: failure trying master.+clocks are unsynchronized" value("MESSAGE"));
};

filter f_tsig_not_bad_time{
    match("client.+key.+view.+received notify for zone.+TSIG" value("MESSAGE"));
    or
    match("transfer of.+from.+connected.+" value("MESSAGE"));
    or
    match("client.+key.+view.+transfer of.+started: TSIG.+" value("MESSAGE"));
};

filter f_network_interface_down{
    match("Deleting interface.+interface stats.+" value("MESSAGE"));
};

filter f_network_interface_up{
    match("Listen normally on .+" value("MESSAGE"));
};

filter f_read_only_failure{
    match("I/O error occurred while writing; .+(Read-only file system|Connection refused)" value("MESSAGE"));
};

filter f_read_only_success{
    match("syslog-ng starting up.+" value("MESSAGE"));
};

filter f_zone_transfer_failure{
    match("zone.+/IN/.+refresh: failure trying master.+" value("MESSAGE"));
};

filter f_zone_transfer_success{
    match("transfer of.+/IN/.+Transfer status: success" value("MESSAGE"));
};

filter f_max_connection_limitation{
    match("no more TCP clients" value("MESSAGE"));
};

# Destination
destination d_fw_log{
    file("/var/log/mon-app/fw-log/$HOST/$YEAR$MONTH$DAY.log" create_dirs(yes));
};

destination d_filter_log{
    file("/var/log/mon-app/filter-log/$HOST/$YEAR$MONTH$DAY.log" create_dirs(yes));
    python(
        class("monitoring.Monitoring")
    );
};

#Rewrite
rewrite r_load_configuration_failure_filter{
    set("LoadConfigurationFailed_set", value("FILTER_NAME"));
};

rewrite r_load_configuration_success_filter{
    set("LoadConfigurationFailed_clear", value("FILTER_NAME"));
};

rewrite r_load_zone_failure_filter{
    set("LoadZoneFailed_set", value("FILTER_NAME"));
};

rewrite r_load_zone_success_filter{
    set("LoadZoneFailed_clear", value("FILTER_NAME"));
};

rewrite r_tsig_bad_time_filter{
    set("TsigBadTime_set", value("FILTER_NAME"));
};

rewrite r_tsig_not_bad_time_filter{
    set("TsigBadTime_clear", value("FILTER_NAME"));
};

rewrite r_network_interface_down_filter{
    set("NetworkInterfaceDown_set", value("FILTER_NAME"));
};

rewrite r_network_interface_up_filter{
    set("NetworkInterfaceDown_clear", value("FILTER_NAME"));
};

rewrite r_read_only_failure_filter{
    set("StorageReadOnly_set", value("FILTER_NAME"));
};

rewrite r_read_only_success_filter{
    set("StorageReadOnly_clear", value("FILTER_NAME"));
};

rewrite r_zone_transfer_failure_filter{
    set("ZoneTransferFailed_set", value("FILTER_NAME"));
};

rewrite r_zone_transfer_success_filter{
    set("ZoneTransferFailed_clear", value("FILTER_NAME"));
};

rewrite r_max_connection_limitation_filter{
    set("TcpConnectionLimitExceeded_set", value("FILTER_NAME"));
};

# Log
log { source(s_udp); destination(d_fw_log);};
log {
    source(s_udp);
    log {
        filter(f_load_configuration_failure);
		rewrite(r_load_configuration_failure_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_load_configuration_success);
		rewrite(r_load_configuration_success_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_load_zone_failure);
		rewrite(r_load_zone_failure_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_load_zone_success);
		rewrite(r_load_zone_success_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_tsig_bad_time);
		rewrite(r_tsig_bad_time_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_tsig_not_bad_time);
		rewrite(r_tsig_not_bad_time_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_network_interface_down);
        rewrite(r_network_interface_down_filter);
		destination(d_filter_log);
	};
	log {
        filter(f_network_interface_up);
        rewrite(r_network_interface_up_filter);
		destination(d_filter_log);
	};
    log {
        filter(f_read_only_failure);
		rewrite(r_read_only_failure_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_read_only_success);
		rewrite(r_read_only_success_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_zone_transfer_failure);
		rewrite(r_zone_transfer_failure_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_zone_transfer_success);
		rewrite(r_zone_transfer_success_filter);
        destination(d_filter_log);
    };
    log {
        filter(f_max_connection_limitation);
		rewrite(r_max_connection_limitation_filter);
        destination(d_filter_log);
    };
};